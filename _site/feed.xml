<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tan</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://example.com/</link>
    <atom:link href="http://example.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 12 Aug 2016 10:23:36 +0800</pubDate>
    <lastBuildDate>Fri, 12 Aug 2016 10:23:36 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>iOS 单元测试详解</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;单元测试&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;为什么需要单元测试&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;减少代码中的低级错误。&lt;/li&gt;
  &lt;li&gt;有效的降低bug的出现率。&lt;/li&gt;
  &lt;li&gt;增强可维护性。&lt;/li&gt;
  &lt;li&gt;有助于设计：写单元测试首先给了你一个如何设计 API 的清晰视角。&lt;/li&gt;
  &lt;li&gt;质量保证，根据我的自身经历，让一个开发者记得要测试所有的特性，在代码改变后回归测试所有的功能以及新增或移除的功能，几乎是一件不可能的事情。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;被测试的对象，方法大概分为三种:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有明确的返回值，采用返回值验证法，验证返回值是否符合预期。&lt;/li&gt;
  &lt;li&gt;没有返回值，但方法内部修改了对象的属性或者状态，采用状态验证法，是否符合预期。&lt;/li&gt;
  &lt;li&gt;依赖于外部的类，方法，会调用外部的方法，采用行为验证法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;单元测试可能遇到的问题&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;测试上下文有太多依赖，设计的耦合性太高。&lt;/li&gt;
  &lt;li&gt;运行的速度缓慢，你的单元测试中可能存在外部系统，列入数据库，网络请求，文件系统等。&lt;/li&gt;
  &lt;li&gt;改变一个地方，多处测试受影响，可能是测试设计的问题，也可能是代码的粒度拆分不够。&lt;/li&gt;
  &lt;li&gt;怎样测试私有方法——私有方法有太多的行为 。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;测试哪些东西&lt;/h2&gt;

&lt;p&gt;你在测试哪个组件切面（component aspect）？
这个特性做什么用？你测试的具体行为需求是什么？
针对行为的测试，这是一种行为驱动开发技术(BDD)，可以参考 &lt;a href=&quot;https://codeutopia.net/blog/2015/03/01/unit-testing-tdd-and-bdd/&quot;&gt;unit-testing-tdd-and-bdd&lt;/a&gt;。那什么是行为？
你设计的App中有一个对象，它有一个接口定义了其方法和依赖关系。这些方法和依赖，声明了你对象的约定。它们定义了如何与你应用的其他部分交互，以及它的功能是什么。它们定义了对象的行为。这同时也是你的目标，测试对象的行为。
比如点击按钮是否触发了某个行为。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;怎样进行单元测试&lt;/h2&gt;

&lt;p&gt;单元测试本质上来说就是用断言来判断对象是否达到预期的行为。 &lt;br /&gt;
单元测试的关注点单一，单元测试需要保证你每个测试用例是针对一个单元，而不是一个有很多复杂依赖注入的综合行为。 &lt;br /&gt;
我们尽可能让类方法的职责单一，这样才能保证变化点都集中在被测试的单元中。 &lt;br /&gt;
单元测试一般比较静态，它只是验证某一动作的正确性。
大部分单元测试将针对对象的状态，来断言一个特定的交互是否发生，或者一个特定值是否返回。将依赖提取出来，这可以允许你轻松mock。
注意，你不该将对象的所有依赖都暴露在头文件中，尤其是你开始测试的时候，这样看起来很诱人，但会破坏你类结构的封装，你的接口应该只表述设计需求。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;充分了解需要测试的类的行为特性。&lt;/li&gt;
  &lt;li&gt;对代码重构，针对这些行为编写单元测试。&lt;/li&gt;
  &lt;li&gt;使用伪造类避免对其它类的依赖：被测试的方法需要某个对象作为参数，但测试类中并不关心对象的具体实现。&lt;/li&gt;
  &lt;li&gt;伪造环境避免其它环境的干扰：比如在网络请求异步的环境中，测试代码不好写，可以将该步骤分开，测试请求网络行为，再模拟数据返回，测试网络数据返回后的行为。也可以采用GHUnit等第三方框架。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;单元测试坏的实践&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;不应该测试构造函数–构造函数中应该是实现类的一些细节，而我们是针对对象的行为做测试，所以构造函数没有值得测的东西。&lt;/li&gt;
  &lt;li&gt;不要测试私有方法–私有方法意味着私有，如果你觉得你有必要测试私有方法，那可能你的私有方法中做的事太多了，从而违背了单一职责原则。&lt;/li&gt;
  &lt;li&gt;不要stub私有方法–因为你的私有方法是可以在类中不经通知自由修改的，当stub私有方法后，私有方法修改后可能与你的期望背到而驰，但你的测试还是会通过，这是见很可怕的事情。&lt;/li&gt;
  &lt;li&gt;不要stub第三方库–比如你stub了[AFNetworking sendRequest]方法，不需要通过实际的网络调用是测试内容更单一，当你更换了这个网络库之后，这个测试用例就会失效，而你实际上stub的目的就是模拟网络请求成功。所以测试中应该封装一层，来代替那个库的全部功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;given--when--then-&quot;&gt;Given / When / Then 模式&lt;/h3&gt;

&lt;p&gt;将测试用例分为三个部分 &lt;br /&gt;
* Given 部分，通过创建对象，活着stub对象，将测试的系统设定到指定的状态，来设置测试的环境。&lt;br /&gt;
* When 部分包含了我们具体需要测试的代码。 &lt;br /&gt;
* Then 部分是验证测试的结果，是否达到我们的期望，对象是否有改变，返回值是否合格等。&lt;/p&gt;

&lt;p&gt;下面是家园宝测试作业是否正常继续下载的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)testResumeWithHomeWorkModel{
  //Given
  if (!self.manager) {
      self.manager = [DownLoadHomeWorkManager manager];
  }
  HomeModel* homeModel = [[HomeModel alloc]init];
  homeModel.pid = @&quot;497&quot;;
  //When
  [self.manager resumeTaskWith:homeModel];
  //Then    
  XCTAssertEqual(homeModel.status, HomeworkStateDownloading);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mock&quot;&gt;Mock&lt;/h3&gt;

&lt;p&gt;在iOS测试中的mock框架可以采用OCMock，我们用mock来管理一个对象的所有依赖。当被测试的方法里耦合着其它对象时，但是你不想让这个对象的返回值对这个方法有影响，你可以通过mock 的方式返回一个默认值。 &lt;br /&gt;
另外，我们的测试代码中不能过度的使用mock，mock除去了被测试对象以外的其它对象，这样其它对象修改了之后，这个被测试的对象就不能自动失败。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;单元测试的要求&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;测试用例应该是自解释且独立的：每个测试用例应该不依赖于其它方法的结果作为输入，没有网络请求，没有数据库操作，保证其原子性。&lt;/li&gt;
  &lt;li&gt;测试方法需要解释测试的目的：如 -(void)testObject 就不是一种规范的写法，每个方法的目标应该是单一的，大多数每个方法里都有一个断言。&lt;/li&gt;
  &lt;li&gt;断言语句需要解释测试者的用途：如XCTAssertNotNil,[xxx should]beNil],等等。&lt;/li&gt;
  &lt;li&gt;判断某个测试是否成功是检测方法影响的数据有没有合理的变化：由于单元测试是使用断言来判断的，单元测试中不会对显示层进行约束，所以限定了单元测试的范围，即引起数据的变化。&lt;/li&gt;
  &lt;li&gt;对所有暴露的属性和方法提供测试，私有方法则不必：测试私有方式可以通过子类化，设计分类，kvo等方式获取私有或者内部对象。&lt;/li&gt;
  &lt;li&gt;变化需要新测试的支持：当对外的接口的实现发生变化时，需要编写新的测试。&lt;/li&gt;
  &lt;li&gt;发现bug 并修复后，为了确保修复时成功的，需要进行单元测试。&lt;/li&gt;
  &lt;li&gt;测试有其他依赖时需要避免其它依赖的副作用，可以采用依赖注入的方法， &lt;a href=&quot;https://objccn.io/issue-15-3/&quot;&gt;依赖注入&lt;/a&gt; ，具体可以使用mock 或者真实对象注入。&lt;/li&gt;
  &lt;li&gt;对每一个功能类都要做单元测试。&lt;/li&gt;
  &lt;li&gt;单元测试需要描述和记录代码需要实现的所有需求。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;单元测试框架&lt;/h2&gt;

&lt;h3 id=&quot;xctest&quot;&gt;XCTest&lt;/h3&gt;

&lt;p&gt;XCTest 是iOS自带的一个测试框架，相比于其他第三方集成度高，能满足大部分测试需求。但是并没有提供mock的功能。&lt;/p&gt;

&lt;h3 id=&quot;ocmock&quot;&gt;OCMock&lt;/h3&gt;

&lt;p&gt;OCMock 是一个OC的模拟对象库，他提供了关于mock 和 stub 的功能，可以和XCTest一起使用。它看起来像这样。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)testAddDownLoadHomeWorkModel{
   if (!self.manager) {
       self.manager = [DownLoadHomeWorkManager manager];
   }
   HomeModel* homeModel = [[HomeModel alloc]init];
   //mock 出一个dataCenter
   id dataCenter = OCMClassMock([HomeworkDataCenter class]);
   self.manager.dataCenter = dataCenter;
   homeModel.pid = @&quot;497&quot;;
   //该方法被调用时返回1
   OCMStub([dataCenter insertHomeModel:homeModel]).andReturn(1);
   [self.manager addDownLoadTask:homeModel];
   XCTAssertEqual(homeModel.status, HomeworkStateDownloading);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;kiwi&quot;&gt;Kiwi&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kiwi-bdd/Kiwi&quot;&gt;Kiwi&lt;/a&gt; 是一个行为驱动开发(BDD)的框架，它旨在解决具体问题，帮助开发人员确定应该测什么内容。你不应该关注于测试，而是应该关注于行为。
该框架相比iOS自带的XCTest，它的语法更类似于自然语言，易读性强。
Kiwi 更多使用方法点击 &lt;a href=&quot;http://www.tuicool.com/articles/3auQbez&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SPEC_BEGIN(First)
   describe(@&quot;First&quot;, ^{
    context(@&quot;create a string&quot;, ^{
        __block NSString * name = nil;
        beforeEach(^{
            name = @&quot;aa&quot;;
        });
        it(@&quot;name should be aa&quot;, ^{
            [[name shouldNot]beNil];
        }); 
    });
});
SPEC_END
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-7&quot;&gt;测试实例&lt;/h2&gt;
&lt;p&gt;－－－－－－－－－－－结合家园宝－－－－－－－－－－－&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.processon.com/diagraming/57ac4f86e4b066d99bdf5612&quot;&gt;家园宝结构分析图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/UniTest.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先，我们来看一下iOS的UIViewController。对代码分析时，发现大量的的逻辑都被写在 .m 文件里，我们知道，UIViewController 在 .h 里面暴露的方法很少，可是 .m 大量的逻辑单元测试又不能不做，这就相当于要对代码中的private 方法进行测试。
进一步分析发现，如果在ViewController 中 添加一个ViewModel层，将UIViewController 里的业务逻辑放入中间层，该层可以负责网络的请求，数据的处理等。一方面会使ViewController 更加简洁和实现单一原则，另一方面保证了逻辑的可能性，该中间层会对ViewController 暴露一些接口。在MVC的设计模式中，ViewController 承受了太多的任务导致测试的难度增加，将ViewController 拆分（MVVM）就会更加有利于单元测试。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;describe(@&quot;Bind ViewModel&quot;, ^{
    __block WrapJSMessageView* replyView = nil;
    __block WrapJSMessageViewModel* replyViewModel = nil;
    replyView = [[WrapJSMessageView alloc]init];
    replyViewModel = [[WrapJSMessageViewModel alloc]init];
    replyView.replyViewModel = replyViewModel;
    
    context(@&quot;Test Text Binding  &quot;, ^{
        it(@&quot;Image Should NotNil&quot;, ^{
            [[replyViewModel.image shouldNot]beNil];
        });
        
        //select Image;
        {
            UIImage* image = [UIImage new];
            NSDictionary* dict = @{};
            [dict stub:@selector(objectForKey:) andReturn:image withArguments:@&quot;UIImagePickerControllerOriginalImage&quot;];
            [replyView imagePickerController:[UIImagePickerController new] didFinishPickingMediaWithInfo:dict];
            it(@&quot;select Image&quot;, ^{
                [[replyViewModel.image should]equal:image];
            });
        }
        
        // clear text
        {
            it(@&quot;After reset Image should Be reset&quot;, ^{
                [[replyView should]receive:@selector(resetReplyView)];
                replyViewModel.text = nil;
            });
        }
        
        
        UIButton* sendBtn = nil;
        [UIView getViewByTitle:@&quot;发送&quot; rootView:replyView resultView:&amp;amp;sendBtn];
        
        // test Click ReplyBtn
        {
            it(@&quot;Get Send Btn&quot;, ^{
                [[sendBtn shouldNot]beNil];
            });
        }
        // Send Btn should Be disable
        {
            it(@&quot;Send Btn should Disable&quot;, ^{
                [[theValue(sendBtn.enabled)should] beFalse];
            });
        }
        
        //Send Btn should Be disable
        {
            it(@&quot;Send Btn should Enable&quot;, ^{
                replyViewModel.text = @&quot;222&quot;;
                [[theValue(sendBtn.enabled)should] beFalse];
            });
        }
        
        // ReplyBtnClicked
        {
            [[replyViewModel.replyCommand should]receive:@selector(execute:)];
            
            it(@&quot;Send Should Invalid&quot;, ^{
                [sendBtn sendActionsForControlEvents:UIControlEventTouchUpInside];
            });
        }
        
    });
    
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;DetailNewViewController&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;describe(@&quot;DetailNewViewController&quot;, ^{
    __block DetailNewViewController* detail = [[DetailNewViewController alloc]init];
    context(@&quot;initial with valid post_id&quot;, ^{
        
        id viewModel = OCMClassMock([PostDetailViewModel class]);
        detail.viewModel = viewModel;
        detail.postid = @&quot;100&quot;;
        it(@&quot;initWithPostid should be invoked&quot;, ^{
            OCMVerify([viewModel initWithPostId:[OCMArg any]]);
        });
    });
    
    context(@&quot;Inital&quot;, ^{
        
        PostDetailViewModel* viewModel = [[PostDetailViewModel alloc]initWithPostId:@&quot;1&quot;];
        
        // 测试获取帖子数据
        {
            
            MJRefreshGifHeader* header = nil;
            //获取header
            [UIView getRefeshHeader:detail.view resultView:&amp;amp;header];
            it(@&quot;RefreshController should not be nil&quot;, ^{
                [[header shouldNot]beNil];
            });
            
            
            RACCommand* fetchRawCommand = OCMClassMock([RACCommand class]);
            viewModel.fetchRawDataCommand = fetchRawCommand;
            
            [detail viewDidLoad];
            it(@&quot;should Request Post Data&quot;, ^{
                OCMVerify([header beginRefreshing]);
            });
        }
        
        
        //测试获取评论列表
        
        {
            NSDictionary* returnData = @{
                                         @&quot;ret&quot;:@(1),
                                         @&quot;retCode&quot;:@(1),
                                         };
            
            detail.viewModel = viewModel;
            id fetchReplyCommand = OCMClassMock([RACCommand class]);
            viewModel.fetchReplyListCommand = fetchReplyCommand;
            
            [detail showWithDict:returnData];
            it(@&quot;Then Request ReplyList Data&quot;, ^{
                OCMVerify([fetchReplyCommand execute:[OCMArg any]]);
            });
        }
    });
    
    context(@&quot;Test Click Collect Btn&quot;, ^{
        
        detail.isIntersting = NO;
        detail.contentData = [NSDictionary mock];
        PostDetailViewModel* viewModel = [[PostDetailViewModel alloc]init];
        id command = OCMClassMock([RACCommand class]);
        viewModel.collectCommand = command;
        
        detail.viewModel = viewModel;
        [detail soucangBtnDidClicked];
        
        it(@&quot;Send NetWork should Raised &quot;, ^{
            OCMVerify([command execute:[OCMArg any]]);
        });
        
    });
    
    context(@&quot;Test Click Uncollect Btn&quot;, ^{
        detail.isIntersting = YES;
        detail.contentData = [NSDictionary mock];
        PostDetailViewModel* viewModel = [[PostDetailViewModel alloc]init];
        id command = OCMClassMock([RACCommand class]);
        viewModel.unCollectCommand = command;
        
        detail.viewModel = viewModel;
        [detail soucangBtnDidClicked];
        
        it(@&quot;Uncollected should Raised &quot;, ^{
            OCMVerify([command execute:[OCMArg any]]);
        });
    });
    
    
    context(@&quot;Test NavgationItem &quot;, ^{
        UIView* title = detail.titleSegment;
        it(@&quot;should Not Nil&quot;, ^{
            [[title shouldNot]beNil];
        });
        
        it(@&quot;should Be UISegmentControl&quot;, ^{
            [[title should]beKindOfClass:[UISegmentedControl class]];
        });
        UISegmentedControl* segTitle = (UISegmentedControl*)title;
        it(@&quot;should have Three Segment &quot;, ^{
            [[theValue(segTitle.numberOfSegments) should]equal:@(3)];
        });
    });
    
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;DetailNewViewController+Spec.h&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;DetailNewViewController.h&quot;
&lt;/span&gt;                   
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DetailNewViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;isIntersting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UISegmentedControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleSegment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showWithDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;// UIView 的分类&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;UIView+Spec.h&quot;
#import &quot;MJRefresh.h&quot;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MJRefreshGifHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getRefeshHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rootView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resultView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isKindOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MJRefreshGifHeader&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRefeshHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resultView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getViewByTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rootView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resultView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isKindOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;titleLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getViewByTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://objccn.io/issue-15-1/&quot;&gt;BDD实例&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;我遇到的问题&lt;/h2&gt;
&lt;p&gt;刚开始做单元测试的时候，根本无法下手，帖子模块的版本迭代频繁，业务逻辑复杂，代码行数达到2400行左右。再看代码结构相当混乱。帖子模块所有的数据，包括从网络的发起，数据的接收，界面的显示都混杂在一起，只有少量的view 单独抽了出去，即使是封装的view，数据的显示还是在帖子的控制器中做的。这真的是MVC(Massive-View-Controller)了。为了方便测试，先找几个行为特性测起来，我把网络数据的请求和接受，全部封装到帖子的ViewModel中，抽离出回复框，并给这个view配备了一个ViewModel（因为回复框中也有不少的逻辑），控制器只需要新建并添加就ok了。这样针对回复框的一些行为就可以提取出来测了。帖子页一些行为可以在ViewModel 中测试。 &lt;br /&gt;
在测试的过程中，由于大量的原生数据的显示逻辑都在帖子页的ViewController中，而在测试这个控制器的一些行为时，无法提供帖子的原生数据，或者说因为原生数据格式复杂而难以高效的注入，导致测试的时程序崩溃。经过思考，觉得还是应该将所有的数据交给ViewModel 管理，ViewController或View 应该仅仅和ViewModel 进行数据上的绑定。这样在测试ViewContrllor时就不会对数据有过多的依赖。在测试ViewModel时也能更集中的测试数据的有效性。&lt;/p&gt;

&lt;h1 id=&quot;section-9&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;在做单元测试的时候，更多思考一个对象的行为，它的接口应该如何，并减少对实现的关注。这样你会有更加健壮的代码，以及同样杰出的套件。单元测试的代码简单，但是写好单元测试却不是一件简单的事，对程序员的代码质量要求较高，如何有效的组织行为就考验程序员的水平了。从现在开始，让单元测试来帮你描述代码的行为。&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Aug 2016 17:50:00 +0800</pubDate>
        <link>http://example.com/jekyll/update/2016/08/07/BDD-UniTest.html</link>
        <guid isPermaLink="true">http://example.com/jekyll/update/2016/08/07/BDD-UniTest.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>nginx 配置pathInfo</title>
        <description>&lt;p&gt;网上查了很多资料，但其中是不完整的，不能正确处理path_info.&lt;/p&gt;

&lt;p&gt;首先，修改文件/etc/nginx/fastcgi_params&lt;/p&gt;

&lt;p&gt;修改 SCRIPT_FILENAME 并添加 PATH_INFO 参数,如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastcgi_param   QUERY_STRING            $query_string;
fastcgi_param   REQUEST_METHOD          $request_method;
fastcgi_param   CONTENT_TYPE            $content_type;
fastcgi_param   CONTENT_LENGTH          $content_length;

fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;
fastcgi_param   SCRIPT_NAME             $fastcgi_script_name;
fastcgi_param   PATH_INFO               $fastcgi_path_info;
fastcgi_param       PATH_TRANSLATED         $document_root$fastcgi_path_info;
fastcgi_param   REQUEST_URI             $request_uri;
fastcgi_param   DOCUMENT_URI            $document_uri;
fastcgi_param   DOCUMENT_ROOT           $document_root;
fastcgi_param   SERVER_PROTOCOL         $server_protocol;

fastcgi_param   GATEWAY_INTERFACE       CGI/1.1;
fastcgi_param   SERVER_SOFTWARE         nginx/$nginx_version;

fastcgi_param   REMOTE_ADDR             $remote_addr;
fastcgi_param   REMOTE_PORT             $remote_port;
fastcgi_param   SERVER_ADDR             $server_addr;
fastcgi_param   SERVER_PORT             $server_port;
fastcgi_param   SERVER_NAME             $server_name;

fastcgi_param   HTTPS                   $https;

# PHP only, required if PHP was built with --enable-force-cgi-redirect
fastcgi_param   REDIRECT_STATUS         200;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后修改 /etc/nginx/nginx.conf 文件，在最后添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location ~ [^/]\.php(/|$) {
    fastcgi_split_path_info ^(.+?\.php)(/.*)$;
    if (!-f $document_root$fastcgi_script_name) {
        return 404;
    }

    fastcgi_pass 127.0.0.1:9000;
    fastcgi_index index.php;
    include fastcgi_params;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重启nginx ，执行命令 /etc/init.d/nginx restart&lt;/p&gt;

&lt;p&gt;接下来就可以使用PATH_INFO 了；&lt;/p&gt;

&lt;p&gt;参考文章 &lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/#&quot;&gt;https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/#&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Apr 2016 17:50:00 +0800</pubDate>
        <link>http://example.com/jekyll/update/2016/04/28/nginx-pathinfo.html</link>
        <guid isPermaLink="true">http://example.com/jekyll/update/2016/04/28/nginx-pathinfo.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>使用 UICollection 实现瀑布流</title>
        <description>&lt;p&gt;UICollectionView 瀑布流的简单实现&lt;/p&gt;

&lt;p&gt;UICollectionView 比 tableView 灵活，功能也强大很多。系统实现了流式布局，但用处还有很多限制。&lt;/p&gt;

&lt;p&gt;要想实现更灵活的布局，就咬重写UICollectionViewLayout。&lt;/p&gt;

&lt;p&gt;Demo地址：&lt;a href=&quot;https://github.com/tanhuiya/WaterfallCollectionLayout&quot;&gt;WaterfallCollectionLayout&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先看下实现效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/884671/201601/884671-20160126171726238-851040777.gif&quot; width=&quot;320&quot; height=&quot;490&quot; /&gt;　&lt;/p&gt;

&lt;p&gt;废话不多说，直接上代码：&lt;/p&gt;

&lt;p&gt;先看WaterfallCollectionLayout.m&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;WaterfallCollectionLayout.h&quot;
#define colMargin 5
#define colCount 4
#define rolMargin 5
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WaterfallCollectionLayout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//数组存放每列的总高度
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colsHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//单元格宽度
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;该类要重写以下方法：&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//完成布局前的初始工作
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepareLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//collectionView的内容尺寸
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionViewContentSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//为每个item设置属性
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UICollectionViewLayoutAttributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;layoutAttributesForItemAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//获取制定范围的所有item的属性
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UICollectionViewLayoutAttributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;layoutAttributesForElementsInRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shouldInvalidateLayoutForBoundsChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;newBounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;每次调用会清空&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colsHeight&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;数组里的信息：&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//完成布局前的初始工作
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepareLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepareLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colMargin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//让它重新加载
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colsHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;通过遍历&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colHeight&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;数组里的所有列来获得最长的那一列，返回&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentsize&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//collectionView的内容尺寸
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionViewContentSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colsHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colsHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rolHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colsHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rolHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;longest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rolHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSizeMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每个cell要出来时这个方法会被调用，在此方法中设置该cell的frame。&lt;/p&gt;

&lt;p&gt;注意heightBlock是外部控制器传进来的block用以计算每个cell的高度，现在我只是设置了随机数。如果没有传block进来我这里直接让他崩溃了。&lt;/p&gt;

&lt;p&gt;//为每个item设置属性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath{
	UICollectionViewLayoutAttributes* attr = [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:indexPath];
	NSNumber * shortest = self.colsHeight[0];
	NSInteger  shortCol = 0;
	for (NSInteger i =0;i&amp;lt;self.colsHeight.count;i++) {
		NSNumber* rolHeight = self.colsHeight[i];
		if(shortest.floatValue&amp;gt;rolHeight.floatValue){
		shortest = rolHeight;
		shortCol=i;
		}
	}
	CGFloat x = (shortCol+1)*colMargin+ shortCol * self.colWidth;
	CGFloat y = shortest.floatValue+colMargin;
	
	//获取cell高度
	CGFloat height=0;
	NSAssert(self.heightBlock!=nil, @&quot;未实现计算高度的block &quot;);
	if(self.heightBlock){
		height = self.heightBlock(indexPath);
	}
	attr.frame= CGRectMake(x, y, self.colWidth, height);
	self.colsHeight[shortCol]=@(shortest.floatValue+colMargin+height);
	
	return attr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;//获取所有item的属性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(NSArray&amp;lt;UICollectionViewLayoutAttributes *&amp;gt; *)layoutAttributesForElementsInRect:(CGRect)rect{
	NSMutableArray* array = [NSMutableArray array];
	NSInteger items = [self.collectionView numberOfItemsInSection:0];
	for (int i = 0; i&amp;lt;items;i++) {
		UICollectionViewLayoutAttributes* attr = [self layoutAttributesForItemAtIndexPath:[NSIndexPath indexPathForItem:i inSection:0]];
		[array addObject:attr];
	}
	return array;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;实现下列方法会在出现新的cell时重新布局并调用preparelayout方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds{
return YES;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每列高度的存放，初始高度可以改，我这里是0&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(NSMutableArray *)colsHeight{
	if(!_colsHeight){
		NSMutableArray * array = [NSMutableArray array];
		for(int i =0;i&amp;lt;colCount;i++){
			//这里可以设置初始高度
			[array addObject:@(0)];
		}
		_colsHeight = [array mutableCopy];
	}
	return _colsHeight;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再来看看控制器里就是这么简单&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark getter-setter
-(UICollectionView *)collectionView{
	if(!_collectionView){
		_collectionView = [[UICollectionView alloc]initWithFrame:self.view.frame collectionViewLayout:self.layout];
		_collectionView.backgroundColor = [UIColor whiteColor];
		_collectionView.delegate=self;
		_collectionView.dataSource=self;
		[_collectionView registerClass:[CollectionViewCell class] forCellWithReuseIdentifier:identifer];
	}
	return _collectionView;
}
-(UICollectionViewLayout *)layout{
	if(!_layout){
		_layout = [[WaterfallCollectionLayout alloc]initWithItemsHeightBlock:^CGFloat(NSIndexPath *index) {
		return [self.heightArr[index.item] floatValue];
		}];
	}
	return _layout;
}
-(NSArray *)heightArr{
	if(!_heightArr){
		//随机生成高度
		NSMutableArray *arr = [NSMutableArray array];
		for (int i = 0; i&amp;lt;100; i++) {
			[arr addObject:@(arc4random()%50+80)];
		}
		_heightArr = [arr copy];
	}
	return _heightArr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 12 Nov 2015 17:50:00 +0800</pubDate>
        <link>http://example.com/jekyll/update/2015/11/12/CollectionView.html</link>
        <guid isPermaLink="true">http://example.com/jekyll/update/2015/11/12/CollectionView.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Swift ThPullRefresh</title>
        <description>&lt;p&gt;　　最近自己写了一个下拉加载最新，上拉加载更多的刷新控件。借鉴了其他优秀开源代码的实现效果比如MJRefresh和DGElasticPullRefresh。主要是为了学习别人的优秀思想。&lt;/p&gt;

&lt;p&gt;如何使用：&lt;/p&gt;

&lt;p&gt;github地址：https://github.com/tanhuiya/ThPullRefresh &lt;a href=&quot;https://github.com/tanhuiya/ThPullRefresh&quot;&gt;点击进入&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　Cocoapods 导入：pod ‘ThPullRefresh’，&lt;/p&gt;

&lt;p&gt;　　在项目中 import ‘ThPullRefresh’&lt;/p&gt;

&lt;p&gt;　　手动导入：将’ThPullRefresh’ 文件夹中的所有文件拽入项目中&lt;/p&gt;

&lt;p&gt;　　head与foot基本效果的添加
 　　&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/884671/201601/884671-20160121112547937-1808285116.gif&quot; width=&quot;270&quot; height=&quot;480&quot; /&gt;　　　　&lt;/p&gt;

&lt;p&gt;具体代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;override func viewDidLoad() {
    super.viewDidLoad()
    self.tableView.registerClass(UITableViewCell.classForCoder(), forCellReuseIdentifier: &quot;tableViewCell&quot;)
    self.tableView.rowHeight = UITableViewAutomaticDimension
    self.tableView.estimatedRowHeight = 44
    self.tableView.tableFooterView = UIView()
//        self.tableView.addHeadRefresh(self) { () -&amp;gt; () in
//            self.loadNewData()
//        }
    self.tableView.addHeadRefresh(self, action: &quot;loadNewData&quot;)

    self.tableView.head?.hideTimeLabel=true
    self.tableView.addFootRefresh(self, action: &quot;loadMoreData&quot;)
}


func loadNewData(){
    //延时模拟刷新
    self.index = 0
    DeLayTime(2.0, closure: { () -&amp;gt; () in
        self.dataArr.removeAllObjects()
        for (var i = 0 ;i&amp;lt;5;i++){
            let str = &quot;最新5个cell，第\(self.index++)个&quot;
            self.dataArr.addObject(str)
        }
        self.tableView.reloadData()
        self.tableView .tableHeadStopRefreshing()
    })
    
}  DelayTime是一个方法的宏


func  DeLayTime(x:Double,closure:()-&amp;gt;()){
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, Int64(x * Double(NSEC_PER_SEC))), dispatch_get_main_queue(), closure)
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要实现果冻效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/884671/201601/884671-20160121112857703-1924927269.gif&quot; width=&quot;270&quot; height=&quot;480&quot; /&gt;　&lt;/p&gt;

&lt;p&gt;代码如下&lt;/p&gt;

&lt;p&gt;几个有颜色的点可以忽略，那是开发用于调贝塞尔曲线的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
   	*bgColor 背景颜色
*loadingColor 加载的颜色
*/
public func addBounceHeadRefresh(target:AnyObject?,bgColor:UIColor,loadingColor:UIColor,action : Selector);

//实现如下
self.tableView.addBounceHeadRefresh(self,bgColor:UIColor.orangeColor(),loadingColor:UIColor.blueColor(), action: &quot;loadNewData&quot;)
 停止头部刷新和底部刷新

self.tableView.tableHeadStopRefreshing()
self.tableView.tableFootStopRefreshing
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 08 Oct 2015 17:50:00 +0800</pubDate>
        <link>http://example.com/jekyll/update/2015/10/08/ThRefresh.html</link>
        <guid isPermaLink="true">http://example.com/jekyll/update/2015/10/08/ThRefresh.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
