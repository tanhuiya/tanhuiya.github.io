---
layout: post
title:  "iOS 持续集成之 Gitlab-Ci"
date:   2016-08-16 17:50:00 +0800
categories: jekyll update
---

# iOS 持续集成之 Gitlab-Ci

## 配置Xcode

Xcode唯一需要配置的就是要将你运行的scheme设置成Shared。

1. 打开Xcode项目
2. 选择Product > Scheme > Manage Schemes
3. 将对应的scheme勾选上Shared

![selectShare](https://raw.githubusercontent.com/tanhuiya/RemoteImages/master/Gitlab-Ci/selectShare.png)

## 安装 配置 GitLab Runner

	下载runner到本地
	sudo curl --output /usr/local/bin/gitlab-ci-multi-runner https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-darwin-amd64 
	//修改目录权限
	sudo chmod +x /usr/local/bin/gitlab-ci-multi-runner  

这样就完成了Runner的安装，接下来要为工程注册一个Runner，本地注册Runner需要GitLab项目的CI地址和Token，打开到GitLab，进入对应项目选择 Setting－Runners ，
点击Runners

![clickRunner](https://raw.githubusercontent.com/tanhuiya/RemoteImages/master/Gitlab-Ci/clickRunner.png)
  
---------------------------------------
如下图所示，我们可以看到提示。

---------------------------------------
![result](https://raw.githubusercontent.com/tanhuiya/RemoteImages/master/Gitlab-Ci/configRunner.png)


知道 URL 和 Token 之后就可以就可以注册Runner了

	gitlab-ci-multi-runner register
	WARNING: Running in user-mode.                     
	WARNING: The user-mode requires you to manually start builds processing: 
	WARNING: $ gitlab-runner run                       
	WARNING: Use sudo for system-mode:                 
	WARNING: $ sudo gitlab-runner...  
	 
	//输入之前的URL
	Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/ci):
	https://xxxx.com/ci
	 
	//输入token
	Please enter the gitlab-ci token for this runner:
	&lt;CI runner token from Project &gt; Settings &gt; Runner&gt;
	 
	//描述，这个随意了，一般用默认的就好
	Please enter the gitlab-ci description for this runner:
	[Your-Mac\'s-Name.local]:
	 
	//runner的tag，这个是用于执行脚本时指定runner用的，所以最好起一个比较容易区分的
	Please enter the gitlab-ci tags for this runner (comma separated):
	test_machine
	Registering runner... succeeded                     runner=724a60b5
	 
	//runner的执行器，因为Xcode项目需要用xcodebuild来执行，所以选shell
	Please enter the executor: virtualbox, ssh, shell, parallels, docker, docker-ssh:
	shell
	 
	Runner registered successfully. Feel free to start it, but if it's running 
	already the config should be automatically reloaded! 
	
这时候再刷新GitLab项目的 Runner 界面就会看到一个 Active Runner 了
确认好了之后可以启动 Runner 了。

	cd ~
	gitlab-ci-multi-runner install
	gitlab-ci-multi-runner start

# 编写 yml 配置文件

	stages:
	  - build
	  - archive
	
	build_project:
	  stage : build
	  script :
	        - xctool -workspace XXX.xcworkspace -scheme parent clean
	        - xctool -workspace XXX.xcworkspace -scheme parent -sdk iphonesimulator9.2 -destination name="iPhone 6"  test
	archive_project:
	  stage: archive
	  script:
	        - xctool -workspace XXX.xcworkspace -scheme parent -configuration AppStoreDistribution archive -archivePath build/parent
	        - xcodebuild -exportArchive -archivePath build/parent.xcarchive -exportOptionsPlist exportOptions.plist  -exportPath build/parent
	        - fir p $PWD/build/parent/parent.ipa -T 8a7cf204f8c40f39a6ba41db8b44929d
	  only:
	        - master


>在项目根目录下配置 .gitlab-ci.yml 文件

>* 上面的配置文件中定义了两个stages。
* 用于描述两个阶段，一般有build，test，archive，deploy等。
* stage 可以在所有job中使用,上面的build_project和archive_project 就是job，每个job 分别对应执行哪个stage。
* script 中就是你要执行的脚本。
* 如果你的项目中没有使用 xcworkspace，就把相应的 －workspace XXX.xcworkspace 改为 -xcodeproject XXX.xcodeproject 。
* 配置文件中用到了xctool 工具,和xcodebuild 相似，具体安装及使用 [xctool](https://github.com/facebook/xctool)
* archive 过程将项目export 出 ipa 文件 并上传至 fir 平台。fir 工具可以上传 ipa 文价，具体使用 [fir 使用](https://github.com/FIRHQ/fir-cli/blob/master/README.md)
* exportOptions.plist是放在根目录下的配置打包参数的，可以参考 xcodebuild --help 
* only - master 是指只有提交master 分支才有执行 build_project job。

> fir 安装   

	gem install fir-cli   

>上传至fir  

	fir p path/to/xxx.ipa -T #API TOKEN# 

![token](https://raw.githubusercontent.com/tanhuiya/RemoteImages/master/Gitlab-Ci/apitoken.png)	

如果一切成功的话，就会有如下 passed 标志 。

![result](https://raw.githubusercontent.com/tanhuiya/RemoteImages/master/Gitlab-Ci/result.png)


小结，在测试，打包过程中可能会出现许多奇怪的错误，可以自己google或者询问我。

[demo 地址](https://gitlab.oneitfarm.com/tanhui/iOS_Ci_Test)