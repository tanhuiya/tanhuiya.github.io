---
layout: post
title:  "iOS 测试(二)"
date:   2016-08-17 09:50:00 +0800
categories: iOS
---

# iOS 测试

## 测试类型
> ### 单元测试
>>单元测试是指对软件系统中的最小可测试单元进行检查，一般是指不可分割的模块和函数。

> ### 集成测试
>>集成测试是单元测试的逻辑扩展，最简单的形式就是把两个已经测试过的单元组成一个组件，并测试他们的接口。从这层意义上讲，组件是指多个单元测试的集成聚合。在iOS 开发领域中，集成测试被简单的分为 Api 接口测试，和功能集成测试。Api 接口测试是指，若一个iOS程序以网络请求的方式请求数据，测试时需要验证网络请求以及相应是否符合预期。iOS 功能集成测试其实就是功能测试。iOS 程序中，许多功能都是在UI上体现的，所以功能的测试主要就是 UI 的测试。

> ### 系统测试
>> 系统测试类似黑盒测试，将已经确认的软件，计算机硬件以及网络等元素结合到一起，验证系统是否符合需求规格的定义，找出与需求规格不符合的地方。


## iOS 程序中需要测什么
从分层的角度看，iOS应用也要分为前台展现和后台服务两个部分，每个组件都应该有单元测试和集成测试的步骤。

> ### MVC
>> 在最基础的 MVC 模式中，每一次动作都是以 View 的 Action 方式传递给 Controller ，然后Controller 通知 Model 去响应，Model 层的业务逻辑有了结果之后，会以通知(Notification)的方式通知 Controller ，这时Controller 收到通知后会更新View 的显示状态。这样一个MVC 的响应循环就完成了。  

![MVC](https://github.com/tanhuiya/RemoteImages/blob/master/Tests/MVC.png?raw=true)
  
> * Model 层的业务是可以直接进行单元测试的，Model 的测试包括 Controller 到 Model 的测试，以及 Model 到Controller 的测试。
> * Action的测试，从 View 层到 Controller 层，Action 表示用户对View 进行了操作，View 响应了操作并调用Controller 方法或者 View 自己处理了方法。Action 部分可以被更细致的分为三个部分   

 >> * 确认View 是否存在。
 >> * 确认View 是否正常响应，绑定了正确的事件或方法。
 >> * 确认View 发送消息的方式是否正确。
 
> * Update的测试，当数据从 Model 层传递到 Controller 之后，需要更新 View ，这部分需要测试View 是否正常显示。
> 

> ### MVVM 
>> MVVM 是从 MVC 衍生出来的。测试的内容基本相同，将大部分的Controller 的逻辑迁移到ViewModel 中去了。

![MVVM](https://github.com/tanhuiya/RemoteImages/blob/master/Tests/MVVM.png?raw=true)

> * Controller 自身的测试包括生命周期的一些逻辑，以及流程的跳转。